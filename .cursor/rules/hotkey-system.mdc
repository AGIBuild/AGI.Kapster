---
description: Global hotkey system architecture and platform patterns
globs: **/Services/Hotkeys/*.cs
---

# Hotkey System

## Architecture
- **IHotkeyProvider** - Platform-specific registration (Windows/macOS/unsupported)
- **IHotkeyManager** - High-level management and settings integration
- **IApplicationController** - Application lifecycle coordination

## Platform Implementations
- **Windows**: RegisterHotKey/UnregisterHotKey API
- **macOS**: Platform-specific implementation
- **Unsupported**: No-op implementation for other platforms

## Settings Integration
- Hotkeys stored in user settings.json
- Dynamic registration on settings changes
- Default: Alt+A (capture), Alt+S (settings)

## Async Pattern
Use TaskCompletionSource for async hotkey events:
```csharp
private TaskCompletionSource<bool>? _hotkeyTcs;
public async Task<bool> WaitForHotkeyAsync(CancellationToken ct)
{
    _hotkeyTcs = new TaskCompletionSource<bool>();
    return await _hotkeyTcs.Task;
}
```

## Thread Safety
- Hotkey callbacks on different threads
- Use Dispatcher for UI thread operations
- Unregister on application exit