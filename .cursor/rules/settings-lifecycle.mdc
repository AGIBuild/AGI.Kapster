---
description: Settings service lifecycle and singleton pattern
globs: **/Services/*Settings*.cs,**/Services/SettingsService.cs
---

# Settings Service Lifecycle

## Pattern: Singleton via DI
ISettingsService is registered as singleton in DI container. Must use dependency injection - no direct instantiation.

## 3-Tier Configuration Loading
1. **Default** → hardcoded in AppSettings
2. **appsettings.json** → repository/system config (IConfiguration)
3. **user settings.json** → user preferences (%AppData%/AGI.Kapster/)

Later tiers override earlier ones, with one exception: AutoUpdate.Enabled is user-configurable, all other AutoUpdate fields come from appsettings.json.

## Usage Pattern
```csharp
// Inject in constructor (recommended)
public MyService(ISettingsService settingsService)
{
    _settingsService = settingsService;
}

// Update settings
await _settingsService.UpdateSettingsAsync(newSettings);
// All consumers see changes immediately (singleton)
```

## File I/O
- In-memory lock serializes writes
- FileShare.ReadWrite for reads, FileShare.Read for writes
- Graceful handling of UnauthorizedAccessException
- Location: `%AppData%/AGI.Kapster/settings.json`

## Registration
```csharp
services.AddSingleton<ISettingsService>(provider =>
    new SettingsService(
        provider.GetRequiredService<IFileSystemService>(),
        provider.GetRequiredService<IConfiguration>()
    ));
```
