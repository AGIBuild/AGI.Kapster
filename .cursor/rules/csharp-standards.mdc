---
globs: *.cs
description: C# coding standards and patterns for AGI.Kapster
---

# C# Coding Standards

## Naming
- **PascalCase**: Classes, methods, properties, enums, public fields
- **camelCase**: Local variables, parameters
- **_camelCase**: Private fields
- **UPPER_CASE**: Constants

## Dependency Injection
**Service Registration** - Use extension methods in `Extensions/` directory:
```csharp
public static class CoreServiceExtensions
{
    public static IServiceCollection AddCoreServices(this IServiceCollection services)
    {
        services.AddSingleton<ISettingsService>(...);
        return services;
    }
}

// In Program.cs
builder.Services
    .AddCoreServices()
    .AddStartupServices()
    .AddHotkeyServices();
```

**Lifetimes**:
- Singleton: ISettingsService, IApplicationController, IHotkeyManager
- Transient: IOverlayWindow, SettingsWindow

**Pattern**: Constructor injection only, no service locator

## Service Patterns
**ISettingsService**: Singleton via DI, 3-tier config loading, no direct instantiation

**Single Instance**: Named Mutex in Program.Main for cross-process enforcement

**Platform Services**: Interface + platform-specific implementations (Windows/macOS/Linux)

## Logging
- Prefer `Log.Debug()` over `Log.Information()` for development
- Include structured parameters: `Log.Debug("Action: {Property}", value)`
- Serilog configured with `shared: true` for concurrent file access

## File I/O
- Read: FileShare.ReadWrite
- Write: FileShare.Read with in-memory lock for serialization
- Handle UnauthorizedAccessException gracefully

## Platform-Specific
- Runtime check: `RuntimeInformation.IsOSPlatform(OSPlatform.Windows)`
- Attribute: `[SupportedOSPlatform("windows")]`
- Isolate in dedicated implementations (e.g., WindowsStartupManager)
